services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nosdesk-postgres
    restart: unless-stopped
    env_file: docker.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - nosdesk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nosdesk} -d ${POSTGRES_DB:-helpdesk}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nosdesk-redis
    restart: unless-stopped
    env_file: docker.env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-nosdesk_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - nosdesk-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend - Production (default)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    platform: linux/amd64
    container_name: nosdesk-backend
    restart: unless-stopped
    env_file: docker.env
    volumes:
      - backend_uploads:/app/uploads
    ports:
      - "3000:8080"
      - "8080:8080"
    networks:
      - nosdesk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["prod"]

  # Backend - Development
  backend-dev:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: nosdesk-backend-dev
    env_file: docker.env
    volumes:
      - ./backend/src:/app/src
      - ./backend/migrations:/app/migrations
      - ./backend/Cargo.toml:/app/Cargo.toml
      - ./backend/Cargo.lock:/app/Cargo.lock
      - ./backend/public:/app/public  # Frontend build output
      - backend_cargo_cache:/usr/local/cargo/registry
      - backend_uploads:/app/uploads
    ports:
      - "8080:8080"
      - "3000:8080"  # Also expose on port 3000 for consistency
    networks:
      - nosdesk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RUST_ENV=development
      - RUST_LOG=${RUST_LOG:-debug}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8080}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:8080} # Frontend served by backend
      - ENVIRONMENT=${ENVIRONMENT:-development}
    profiles: ["dev"]

  # Frontend Build Service - Development (optional for live reloading)
  frontend-watch:
    image: node:18-alpine
    container_name: nosdesk-frontend-watch
    working_dir: /app
    volumes:
      - ./frontend:/app
      - ./backend/public:/app/dist  # Mount the backend public directory to dist
      - frontend_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev:unified"
    profiles: ["dev"]  # Now uses the same profile as backend-dev for unified dev experience

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  frontend_node_modules:
    driver: local
  backend_cargo_cache:
    driver: local

networks:
  nosdesk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 